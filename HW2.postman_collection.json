{
	"info": {
		"_postman_id": "5f2310fe-1c17-4c09-83b1-3b7794ed1fca",
		"name": "HW2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24932465"
	},
	"item": [
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"pm.environment.set(\"token\", jsonData.token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "token",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/login",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!ss\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Статус код 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"// 4. Проверить, что name в ответе равно name s request\r",
							" pm.test(\"Проверить, что name в ответе равно name s request\", function () {\r",
							"     pm.expect(jsonData.name).to.eql(\"Vlad\");\r",
							"     });\r",
							"// 5. Проверить, что age в ответе равно age s request\r",
							"pm.test(\"Проверить, что age в ответе равно age s request\", function () {\r",
							"     pm.expect(jsonData.age).to.eql(\"28\");\r",
							"});\r",
							"// 6. Проверить, что salary в ответе равно salary s request\r",
							"pm.test(\"Проверить, что salary в ответе равно salary s request\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(400);\r",
							"})\r",
							"// 7. Спарсить request.\r",
							"const reqData = request.data;\r",
							"// 8. Проверить, что name в ответе равно name s request\r",
							"pm.test(\"Req_Resp_name_check\", function (){\r",
							"    pm.expect(jsonData.name).to.eql(jsonData.name);\r",
							"})\r",
							"// 9. Проверить, что age в ответе равно age s request\r",
							"pm.test(\"Req_Resp_age_check\", function (){\r",
							"    pm.expect(jsonData.age).to.eql(jsonData.age);\r",
							"})\r",
							"// 10. Проверить, что salary в ответе равно salary s request\r",
							"pm.test(\"Req_Resp_salary_check\", function (){\r",
							"    pm.expect(jsonData.salary).to.eql(jsonData.salary);\r",
							"})\r",
							"// 11. Вывести в консоль параметр family из response\r",
							"console.log(jsonData.family);\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4\r",
							"var resp_salary = jsonData.resp_u_salary_1_5_year\r",
							"var req_salary = reqData.salary*4\r",
							"console.log(\"resp_u_1_5_salary_year =\", req_salary*4)\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "token",
						"value": "{{token}}",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Vlad",
							"type": "text"
						},
						{
							"key": "age",
							"value": "28",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "400",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Vlad",
							"disabled": true
						},
						{
							"key": "age",
							"value": "28",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "400",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Статус код 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"// 4. Спарсить request.\r",
							"const reqData = request.data;\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Req_Resp_name_check\", function (){\r",
							"    pm.expect(jsonData.name).to.eql(jsonData.name);\r",
							"})\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Req_Resp_age_check\", function (){\r",
							"    pm.expect(jsonData.age).to.eql(jsonData.age);\r",
							"})\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Req_Resp_salary_check\", function (){\r",
							"    pm.expect(jsonData.salary).to.eql(jsonData.salary);\r",
							"})\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"var resp_family = jsonData.family\r",
							"console.log(jsonData.family);\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Dogname_check\",function (){\r",
							"    var jsonData =pm.response.json ();\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"name\")\r",
							"});\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Dogage_check\",function (){\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"age\")\r",
							"});\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"name_dog_check\", function(){\r",
							"    var jsonData = pm.response.json()\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\")\r",
							"});\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Check_age_have_4\",function (){\r",
							"    var jsonData =pm.response.json ();\r",
							"    pm.expect(jsonData.family.pets.dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Vlad&age=28&salary=400",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Vlad"
						},
						{
							"key": "age",
							"value": "28"
						},
						{
							"key": "salary",
							"value": "400"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"// 4. Спарсить request.\r",
							"var req_url = pm.request.url.query.toObject();\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test (\"Check_name\", function () {\r",
							"    var resp_name = jsonData.name;\r",
							"    pm.expect(resp_name).to.eql(req_url.name);\r",
							"});\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"check_age\", function () {\r",
							"    var resp_age = pm.response.json();\r",
							"    pm.expect(jsonData.age).to.eql(+req_url.age);\r",
							"});\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"var resp_salary = jsonData.salary;\r",
							"console.log(\"req_url =\", req_url.salary)\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log(\"resp_salary =\", resp_salary)\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"var resp_salary_0 = jsonData.salary[0]\r",
							"console.log(\"resp_salary_0\", + resp_salary_0)\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"var resp_salary_1 =jsonData.salary[1]\r",
							"console.log(\"resp_salary_1\", + resp_salary_1)\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"var resp_salary_2 = jsonData.salary[2]\r",
							"console.log(\"resp_salary_2\", + resp_salary_2)\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check_0\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(resp_salary_0).to.eql(+req_url.salary);\r",
							"});\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Check_1\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(+resp_salary_1).to.eql(+req_url.salary*2);\r",
							"});\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Check_2\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(+resp_salary_2).to.eql(+req_url.salary*3);\r",
							"});\r",
							"// 15. Создать в окружении переменную name // 18. Передать в окружение переменную name\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"pm.environment.set(\"name\", jsonData.name);\r",
							"// 16. Создать в окружении переменную age // 19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\",jsonData.age);\r",
							"// 17. Создать в окружении переменную salary // 20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\",jsonData.salary[0]);\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for (let i in resp_salary) {\r",
							"    console.log(resp_salary[i]);\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Vlad&age=28&salary=400",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Vlad"
						},
						{
							"key": "age",
							"value": "28"
						},
						{
							"key": "salary",
							"value": "400"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request\r",
							"pm.environment.get(\"salary\", 400);\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"pm.environment.get(\"age\", 28);\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"pm.environment.get(\"name\",\"Vlad\");\r",
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 6. Спарсить response body в json.\r",
							"var resjsonData = pm.response.json();\r",
							"// 7. Спарсить request.\r",
							"var reqjsonData = request.data;\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"CheckQAstart\", function(){\r",
							"    pm.expect(resjsonData).to.have.property(\"start_qa_salary\")\r",
							"})\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"CheckQAjun\", function(){\r",
							"    pm.expect(resjsonData).to.have.property(\"qa_salary_after_6_months\")\r",
							"})\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"CheckQAmid\", function(){\r",
							"    pm.expect(resjsonData).to.have.property(\"qa_salary_after_12_months\")\r",
							"})\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"CheckQAmiddle\", function(){\r",
							"    pm.expect(resjsonData).to.have.property(\"qa_salary_after_1.5_year\")\r",
							"})\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"CheckQAsen\", function(){\r",
							"    pm.expect(resjsonData).to.have.property(\"qa_salary_after_3.5_years\")\r",
							"})\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Checkperson\", function(){\r",
							"    pm.expect(resjsonData).to.have.property(\"person\")\r",
							"})\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Checkstart0\"), function(){\r",
							"    pm.expect(resjsonData.start_qa_salary).to.eql(reqjsonData.salary)\r",
							"}\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Checkjun\"), function() {\r",
							"    var multireqjsonjun = (reqjsonData.salary)*2; \r",
							"    pm.expect(resjsonData.qa_salary_after_6_months).to.eql(multireqjsonjun)\r",
							"}\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"Checkmid\"), function() {\r",
							"    var multireqjsonmid = (reqjsonData.salary)*2.7; \r",
							"    pm.expect(resjsonData.qa_salary_after_12_months).to.eql(multireqjsonmid)\r",
							"}\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"Checkmiddle\"), function() {\r",
							"    var multireqjsonmiddle = (reqjsonData.salary)*3.3; \r",
							"    pm.expect(resjsonData['qa_salary_after_1.5_year']).to.eql(multireqjsonmiddle)\r",
							"}\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"Checksen\"), function() {\r",
							"    var multireqjsonsen = (reqjsonData.salary)*3.8; \r",
							"    pm.expect(resjsonData['qa_salary_after_3.5_years']).to.eql(multireqjsonsen)\r",
							"}\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"reqperson\",function(){\r",
							"    pm.expect(resjsonData.person.u_name[0]).to.eql(reqjsonData.name)\r",
							"})\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"reqage\",function(){\r",
							"    pm.expect(resjsonData.person.u_age).to.eql(+reqjsonData.age)\r",
							"})\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"reqyears\",function(){\r",
							"    var reqjsonlid = (+reqjsonData.salary)*4.2;\r",
							"    pm.expect(resjsonData.person.u_salary_5_years).to.eql(reqjsonlid)\r",
							"})\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"var jsonData = pm.response.json();\r",
							"var resp_person = (Object.keys(resjsonData.person));\r",
							"for (var i of resp_person){\r",
							"    var resp_person = jsonData.person[i];\r",
							"    if (typeof (i) == Object) {\r",
							"        for (var ii of i){\r",
							"            var resp_u_name = Object.keys(jsonData.person.u_name[ii]);\r",
							"            console.log(\"resp username\", resp_u_name);\r",
							"        }\r",
							"    }\r",
							"    console.log(\"person -\", resp_person);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}